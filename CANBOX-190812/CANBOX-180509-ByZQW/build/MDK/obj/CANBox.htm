<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\CANBox.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\CANBox.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Mar 04 16:28:27 2020
<BR><P>
<H3>Maximum Stack Usage =        768 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CWJ_Test &rArr; GUI_GetInput &rArr; system_event_pop &rArr; qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SysCtlDelay</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">CAN0_Handler</a> from arch_irq.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">IntDefaultHandler</a> from interrupt.o(.text) referenced from interrupt.o(.text)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(RESET) referenced 118 times from startup.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">Timer0A_Handler</a> from arch_irq.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">Timer1B_Handler_delay</a> from arch_irq.o(.text) referenced from arch_board.o(.text)
 <LI><a href="#[a]">Timer2B_Handler</a> from arch_irq.o(.text) referenced from arch_board.o(.text)
 <LI><a href="#[4]">UART0_Handler</a> from arch_uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[b]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[10]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[f]">fputc</a> from arch_uart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[e]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[7]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[153]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[12]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[148]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[154]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[155]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[156]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[157]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[158]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMClearSectorMask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMSetSectorMask
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[42]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[159]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[40]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[3c]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDeepSleep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
</UL>

<P><STRONG><a name="[44]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPriorityMaskSet
</UL>

<P><STRONG><a name="[46]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPriorityMaskGet
</UL>

<P><STRONG><a name="[1d]"></a>GPIODirModeSet</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBDigital
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECITx
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECIRx
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeLPC
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeFan
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetMII
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEPI
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeComparator
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
</UL>

<P><STRONG><a name="[15a]"></a>GPIODirModeGet</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>GPIOIntTypeSet</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>GPIOIntTypeGet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>GPIOPadConfigSet</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBDigital
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECITx
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECIRx
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeLPC
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeFan
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetMII
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEPI
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeComparator
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
</UL>

<P><STRONG><a name="[15d]"></a>GPIOPadConfigGet</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>GPIOPinIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>GPIOPinIntDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>GPIOPinIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>GPIOPinIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>GPIOPortIntRegister</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOGetIntNumber
</UL>

<P><STRONG><a name="[19]"></a>GPIOPortIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOGetIntNumber
</UL>

<P><STRONG><a name="[93]"></a>GPIOPinRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_is_busy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_GetMode
</UL>

<P><STRONG><a name="[90]"></a>GPIOPinWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_Reset_setup
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_Onoff
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_runled_setup
</UL>

<P><STRONG><a name="[1c]"></a>GPIOPinTypeADC</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[1f]"></a>GPIOPinTypeCAN</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeCAN &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[20]"></a>GPIOPinTypeComparator</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[21]"></a>GPIOPinTypeEPI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[22]"></a>GPIOPinTypeEthernetLED</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[23]"></a>GPIOPinTypeEthernetMII</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[24]"></a>GPIOPinTypeFan</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[25]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_GetMode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_gpio_config
</UL>

<P><STRONG><a name="[26]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_GetMode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_gpio_config
</UL>

<P><STRONG><a name="[27]"></a>GPIOPinTypeGPIOOutputOD</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[28]"></a>GPIOPinTypeI2C</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[29]"></a>GPIOPinTypeI2CSCL</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[2a]"></a>GPIOPinTypeI2S</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[2b]"></a>GPIOPinTypeLPC</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[2c]"></a>GPIOPinTypePECIRx</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[2d]"></a>GPIOPinTypePECITx</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[2e]"></a>GPIOPinTypePWM</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[2f]"></a>GPIOPinTypeQEI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[30]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_gpio_config
</UL>

<P><STRONG><a name="[31]"></a>GPIOPinTypeTimer</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[32]"></a>GPIOPinTypeUART</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
</UL>

<P><STRONG><a name="[33]"></a>GPIOPinTypeUSBAnalog</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[34]"></a>GPIOPinTypeUSBDigital</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[77]"></a>GPIOPinConfigure</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_gpio_config
</UL>

<P><STRONG><a name="[162]"></a>GPIODMATriggerEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>GPIODMATriggerDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>GPIOADCTriggerEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>GPIOADCTriggerDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>GPIOSetUnlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>GPIOSetLock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>SysCtlSRAMSizeGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>SysCtlFlashSizeGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>SysCtlPinPresent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>SysCtlPeripheralPresent</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralMapToNew
</UL>

<P><STRONG><a name="[37]"></a>SysCtlPeripheralPowerOn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralMapToNew
</UL>

<P><STRONG><a name="[38]"></a>SysCtlPeripheralPowerOff</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralMapToNew
</UL>

<P><STRONG><a name="[6a]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>

<P><STRONG><a name="[76]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config_HS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_gpio_config
</UL>

<P><STRONG><a name="[16c]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>SysCtlPeripheralSleepEnable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>SysCtlPeripheralSleepDisable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>SysCtlPeripheralDeepSleepEnable</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>SysCtlPeripheralDeepSleepDisable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>SysCtlPeripheralClockGating</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>SysCtlIntRegister</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[3a]"></a>SysCtlIntUnregister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[172]"></a>SysCtlIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>SysCtlIntDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>SysCtlIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>SysCtlIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>SysCtlLDOSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>SysCtlLDOGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>SysCtlLDOConfigSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>SysCtlReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysctl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_parse_su
</UL>

<P><STRONG><a name="[3b]"></a>SysCtlSleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>

<P><STRONG><a name="[3d]"></a>SysCtlDeepSleep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>

<P><STRONG><a name="[179]"></a>SysCtlResetCauseGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>SysCtlResetCauseClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>SysCtlBrownOutConfigSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>SysCtlMOSCConfigSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>SysCtlPIOSCCalibrate</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>SysCtlClockSet</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[7a]"></a>SysCtlClockGet</STRONG> (Thumb, 592 bytes, Stack size 16 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config_HS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[17e]"></a>SysCtlDeepSleepClockSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>SysCtlPWMClockGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>SysCtlADCSpeedSet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>SysCtlADCSpeedGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SysCtlIOSCVerificationSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>SysCtlMOSCVerificationSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>SysCtlPLLVerificationSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>SysCtlClkVerificationClear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>SysCtlGPIOAHBEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>SysCtlGPIOAHBDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>SysCtlUSBPLLEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>SysCtlUSBPLLDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>SysCtlI2SMClkSet</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[41]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>

<P><STRONG><a name="[17]"></a>IntRegister</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntRegister
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntRegister
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntRegister
</UL>

<P><STRONG><a name="[1b]"></a>IntUnregister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntUnregister
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntUnregister
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntUnregister
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntUnregister
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntUnregister
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntUnregister
</UL>

<P><STRONG><a name="[18c]"></a>IntPriorityGroupingSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>IntPriorityGroupingGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>IntPrioritySet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[18e]"></a>IntPriorityGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>IntEnable</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntRegister
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntRegister
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntRegister
</UL>

<P><STRONG><a name="[1a]"></a>IntDisable</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntUnregister
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntUnregister
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntUnregister
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntUnregister
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntUnregister
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntUnregister
</UL>

<P><STRONG><a name="[18f]"></a>IntPendSet</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>IntPendClear</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>IntPriorityMaskSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUbasepriSet
</UL>

<P><STRONG><a name="[45]"></a>IntPriorityMaskGet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUbasepriGet
</UL>

<P><STRONG><a name="[8c]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
</UL>

<P><STRONG><a name="[191]"></a>TimerDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>TimerConfigure</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
</UL>

<P><STRONG><a name="[192]"></a>TimerControlLevel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>TimerControlTrigger</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>TimerControlEvent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>TimerControlStall</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>TimerControlWaitOnTrigger</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>TimerRTCEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>TimerRTCDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>TimerPrescaleSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>TimerPrescaleGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>TimerPrescaleMatchSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>TimerPrescaleMatchGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>TimerLoadSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
</UL>

<P><STRONG><a name="[19d]"></a>TimerLoadGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>TimerLoadSet64</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>TimerLoadGet64</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>TimerValueGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>TimerValueGet64</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>TimerMatchSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>TimerMatchGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>TimerMatchSet64</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>TimerMatchGet64</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>TimerIntRegister</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntNumberGet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
</UL>

<P><STRONG><a name="[49]"></a>TimerIntUnregister</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntNumberGet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerQuiesce
</UL>

<P><STRONG><a name="[8b]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
</UL>

<P><STRONG><a name="[1a6]"></a>TimerIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>TimerIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2B_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1B_Handler_delay
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Handler
</UL>

<P><STRONG><a name="[1a8]"></a>TimerSynchronize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>TimerQuiesce</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntUnregister
</UL>

<P><STRONG><a name="[7e]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config_HS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config
</UL>

<P><STRONG><a name="[7f]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config_HS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config
</UL>

<P><STRONG><a name="[1a9]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>SSIIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntNumberGet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[4d]"></a>SSIIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntNumberGet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[1aa]"></a>SSIIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>SSIIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>SSIIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>SSIIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>SSIDataPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>

<P><STRONG><a name="[1ae]"></a>SSIDataPutNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>SSIDataGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>

<P><STRONG><a name="[1af]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>SSIDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>SSIDMADisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>SSIBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>SSIClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>SSIClockSourceGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>CANInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANInit &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[54]"></a>CANEnable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[55]"></a>CANDisable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[56]"></a>CANBitTimingGet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[57]"></a>CANBitRateSet</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CANBitRateSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[58]"></a>CANBitTimingSet</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[59]"></a>CANIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[5a]"></a>CANIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[5b]"></a>CANIntEnable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIntEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[5c]"></a>CANIntDisable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[5d]"></a>CANIntStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIntStatus &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[5e]"></a>CANIntClear</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIntClear &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[5f]"></a>CANRetrySet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[60]"></a>CANRetryGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[61]"></a>CANStatusGet</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANStatusGet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[62]"></a>CANErrCntrGet</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[63]"></a>CANMessageSet</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_send
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[64]"></a>CANMessageGet</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CANMessageGet &rArr; CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetMessage
</UL>

<P><STRONG><a name="[65]"></a>CANMessageClear</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[68]"></a>EEPROMInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWaitForDone
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_config
</UL>

<P><STRONG><a name="[1b5]"></a>EEPROMSizeGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>EEPROMBlockCountGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>EEPROMRead</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_read
</UL>

<P><STRONG><a name="[6b]"></a>EEPROMProgram</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROMProgram &rArr; EEPROMSetSectorMask
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMClearSectorMask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMSetSectorMask
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_write
</UL>

<P><STRONG><a name="[6c]"></a>EEPROMProgramNonBlocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMSetSectorMask
</UL>

<P><STRONG><a name="[6d]"></a>EEPROMMassErase</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWaitForDone
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[1b7]"></a>EEPROMBlockProtectGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>EEPROMBlockProtectSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>EEPROMBlockPasswordSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>EEPROMBlockLock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>EEPROMBlockUnlock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>EEPROMBlockHide</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>EEPROMIntEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>EEPROMIntDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>EEPROMIntStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>EEPROMIntClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMClearSectorMask
</UL>

<P><STRONG><a name="[1c0]"></a>EEPROMStatusGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>UARTParityModeSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>UARTParityModeGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>UARTFIFOLevelGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[70]"></a>UARTDisable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[6f]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
</UL>

<P><STRONG><a name="[1c5]"></a>UARTConfigGetExpClk</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>UARTFIFOEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>UARTFIFODisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>UARTEnableSIR</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>UARTDisableSIR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>UARTSmartCardEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>UARTSmartCardDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>UARTModemControlSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>UARTModemControlClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>UARTModemControlGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>UARTModemStatusGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>UARTFlowControlSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>UARTFlowControlGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>UARTTxIntModeSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>UARTTxIntModeGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>UARTCharsAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>UARTSpaceAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[1d5]"></a>UARTCharGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>UARTCharPutNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>UARTCharPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_putc
</UL>

<P><STRONG><a name="[1d7]"></a>UARTBreakCtl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>UARTBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>UARTIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntNumberGet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[74]"></a>UARTIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntNumberGet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[e1]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
</UL>

<P><STRONG><a name="[1d9]"></a>UARTIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>UARTIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[de]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[1da]"></a>UARTDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>UARTDMADisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>UARTRxErrorGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>UARTRxErrorClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>UARTClockSourceGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>UART9BitEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>UART9BitDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>UART9BitAddrSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>UART9BitAddrSend</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>arch_gpio_config</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arch_gpio_config &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[78]"></a>arch_can_config</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = arch_can_config &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_get
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[7c]"></a>arch_can_send</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>

<P><STRONG><a name="[7d]"></a>arch_spi_config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arch_spi_config &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[80]"></a>arch_spi_config_HS</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arch_spi_config_HS &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[81]"></a>arch_SPI_xfer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData16
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData16
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>

<P><STRONG><a name="[84]"></a>arch_eeprom_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arch_eeprom_config &rArr; EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[85]"></a>arch_eeprom_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_eeprom_read &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_load
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_para_load
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_load
</UL>

<P><STRONG><a name="[87]"></a>arch_eeprom_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arch_eeprom_write &rArr; EEPROMProgram &rArr; EEPROMSetSectorMask
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_save
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_para_save
</UL>

<P><STRONG><a name="[88]"></a>arch_timer0_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arch_timer0_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[8d]"></a>arch_timer1_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arch_timer1_init &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[8e]"></a>arch_timer2_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arch_timer2_init &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[8f]"></a>arch_runled_setup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_runled_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_runled_timer
</UL>

<P><STRONG><a name="[91]"></a>arch_runled_timer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_runled_timer &rArr; arch_runled_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_runled_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_hook_100us
</UL>

<P><STRONG><a name="[92]"></a>arch_BackLight_GetMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arch_BackLight_GetMode &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_setup
</UL>

<P><STRONG><a name="[94]"></a>arch_BackLight_Onoff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_BackLight_Onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_timer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_setup
</UL>

<P><STRONG><a name="[95]"></a>arch_BackLight_setup</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arch_BackLight_setup &rArr; RA8875_SetBackLight &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackLight
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_Onoff
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[97]"></a>arch_BackLight_timer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_BackLight_timer &rArr; arch_BackLight_Onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_Onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_hook_100us
</UL>

<P><STRONG><a name="[98]"></a>arch_RA8875_Reset_setup</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_RA8875_Reset_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[99]"></a>arch_RA8875_CS_setup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_RA8875_CS_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData16
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData16
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>

<P><STRONG><a name="[9a]"></a>arch_RA8875_is_busy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arch_board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>

<P><STRONG><a name="[d6]"></a>arch_delay_ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arch_board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Test
</UL>

<P><STRONG><a name="[1e4]"></a>arch_can_delay_nx100us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arch_board.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>arch_hook_100us</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arch_hook_100us &rArr; do_filter &rArr; CF__can_fifo_push_msg &rArr; CF__can_fifo_drop &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_filter
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_timer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_timer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_runled_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Handler
</UL>

<P><STRONG><a name="[112]"></a>arch_get_systicks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFifo_push
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push
</UL>

<P><STRONG><a name="[9e]"></a>arch_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, arch_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = arch_init &rArr; arch_can_config &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_setup
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer2_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer1_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_timer0_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config_HS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_spi_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_gpio_config
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>Timer0A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arch_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Timer0A_Handler &rArr; arch_hook_100us &rArr; do_filter &rArr; CF__can_fifo_push_msg &rArr; CF__can_fifo_drop &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_hook_100us
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Timer1B_Handler_delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arch_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1B_Handler_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_board.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>Timer2B_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arch_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2B_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_board.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>CAN_GetMessage</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, arch_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAN_GetMessage &rArr; CANMessageGet &rArr; CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[6]"></a>CAN0_Handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, arch_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN0_Handler &rArr; CAN_GetMessage &rArr; CANMessageGet &rArr; CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetMessage
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>RA8875_ReadData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>

<P><STRONG><a name="[ac]"></a>RA8875_ReadID</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_ReadID &rArr; RA8875_ReadReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[ad]"></a>RA8875_SetCursor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
</UL>

<P><STRONG><a name="[b0]"></a>RA8875_Cursor_Set_Position</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[b1]"></a>BTE_SetTarBlock</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Can_SetClr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>

<P><STRONG><a name="[b2]"></a>BTE_SetOperateCode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BTE_SetOperateCode &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Can_SetClr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>

<P><STRONG><a name="[b3]"></a>RA8875_SetFrontColor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Can_SetClr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Test
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_rounded_rectangle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Drawcurve
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawEllipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawTriangle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawLine
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>

<P><STRONG><a name="[b4]"></a>RA8875_SetBackColor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_SetBackColor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
</UL>

<P><STRONG><a name="[b5]"></a>BTE_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTE_Start &rArr; RA8875_WriteData &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Can_SetClr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>

<P><STRONG><a name="[b6]"></a>BTE_Wait</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTE_Wait &rArr; RA8875_ReadStatus &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Can_SetClr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>

<P><STRONG><a name="[1e5]"></a>RA8875_IsBusy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arch_ra8875.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>RA8875_WaitBusy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_WaitBusy &rArr; RA8875_ReadStatus &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_rounded_rectangle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Drawcurve
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawEllipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawTriangle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawLine
</UL>

<P><STRONG><a name="[b8]"></a>RA8875_Layer1Visable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[b9]"></a>RA8875_Layer2Visable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[ba]"></a>RA8875_TouchInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_TouchInit &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[bb]"></a>RA8875_TouchPress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
</UL>

<P><STRONG><a name="[bc]"></a>RA8875_TouchReadX</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Delaly200us
</UL>

<P><STRONG><a name="[1e6]"></a>RA8875_TouchReadY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_ra8875.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>RA8875_TouchReadXY</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RA8875_TouchReadXY &rArr; RA8875_ReadReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Delaly200us
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_read
</UL>

<P><STRONG><a name="[bf]"></a>RA8875_DispOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[c0]"></a>RA8875_DispOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[c1]"></a>RA8875_PutPixel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetCursor
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData16
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_set_CH
</UL>

<P><STRONG><a name="[c2]"></a>RA8875_GetPixel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetReadCursor
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadData16
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>

<P><STRONG><a name="[c3]"></a>RA8875_ClrScr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RA8875_ClrScr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Wait
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetOperateCode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetTarBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Test
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[c4]"></a>RA8875_PartClrScr</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RA8875_PartClrScr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Wait
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetOperateCode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetTarBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Progress_Bar
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EDIT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Local_color
</UL>

<P><STRONG><a name="[1e7]"></a>LCD8875_DrawHLine</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_ra8875.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>LCD8875_DrawVLine</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_ra8875.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>RA8875_SetDispWin</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetCursor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_QuitWinMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[c6]"></a>RA8875_QuitWinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
</UL>

<P><STRONG><a name="[c7]"></a>RA8875_DrawBMP</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_QuitWinMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData16
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>

<P><STRONG><a name="[c8]"></a>RA8875_DrawLine</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>

<P><STRONG><a name="[c9]"></a>RA8875_DrawTriangle</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[ca]"></a>RA8875_DrawRect</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RA8875_DrawRect &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EDIT
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>

<P><STRONG><a name="[cb]"></a>RA8875_DrawCircle</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[cc]"></a>RA8875_DrawEllipse</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[cd]"></a>RA8875_Drawcurve</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[ce]"></a>RA8875_rounded_rectangle</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RA8875_rounded_rectangle &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Botton
</UL>

<P><STRONG><a name="[cf]"></a>RA8875_SetFont</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>

<P><STRONG><a name="[d0]"></a>RA8875_SetTextZoom</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RA8875_SetTextZoom &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Test
</UL>

<P><STRONG><a name="[d1]"></a>RA8875_DispAscii</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RA8875_DispAscii &rArr; RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Test
</UL>

<P><STRONG><a name="[d2]"></a>RA8875_DispStr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextCursor
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
</UL>

<P><STRONG><a name="[96]"></a>RA8875_SetBackLight</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RA8875_SetBackLight &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_BackLight_setup
</UL>

<P><STRONG><a name="[a0]"></a>RA8875_Init</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RA8875_Init &rArr; RA8875_SetDispWin &rArr; RA8875_SetCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadID
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Delaly1ms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Delaly1us
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_Reset_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[d5]"></a>RA8875_Test</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispAscii
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_ms
</UL>

<P><STRONG><a name="[1e9]"></a>arch_touch_callback_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_touch.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>arch_touch_d2p</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, arch_touch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_proc
</UL>

<P><STRONG><a name="[d7]"></a>arch_touch_read</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, arch_touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arch_touch_read &rArr; RA8875_TouchReadXY &rArr; RA8875_ReadReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_data_insert
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadXY
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_detect
</UL>

<P><STRONG><a name="[9d]"></a>arch_touch_timer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, arch_touch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_hook_100us
</UL>

<P><STRONG><a name="[d9]"></a>arch_touch_proc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, arch_touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arch_touch_proc &rArr; touchctl_HotArea_Machit &rArr; system_event_push
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Machit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_d2p
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_detect
</UL>

<P><STRONG><a name="[dc]"></a>arch_touch_detect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, arch_touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = arch_touch_detect &rArr; arch_touch_read &rArr; RA8875_TouchReadXY &rArr; RA8875_ReadReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_proc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_pop
</UL>

<P><STRONG><a name="[4]"></a>UART0_Handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, arch_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>arch_uart_config</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, arch_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arch_uart_config &rArr; UARTConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>

<P><STRONG><a name="[e2]"></a>arch_uart_putc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arch_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arch_uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_cmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_poll
</UL>

<P><STRONG><a name="[103]"></a>arch_uart_getc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, arch_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_poll
</UL>

<P><STRONG><a name="[f]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, arch_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; arch_uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[7]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = main &rArr; CWJ_Test &rArr; GUI_GetInput &rArr; system_event_pop &rArr; qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fifo_para_load
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_buf_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e9]"></a>Graw_Show_Button</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, canmonitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_status
</UL>

<P><STRONG><a name="[ec]"></a>Can_send_frame</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Can_send_frame &rArr; arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFifo_push
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send_CMD
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send2
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send_UP
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send_DOWN
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send1
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send
</UL>

<P><STRONG><a name="[ee]"></a>Draw_bar</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, canmonitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clr
</UL>

<P><STRONG><a name="[f1]"></a>can_send_load</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, canmonitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1ea]"></a>can_motor_back</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, canmonitor.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>can_receive_clc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, canmonitor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[f3]"></a>CWJ_CAN_Send</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CWJ_CAN_Send &rArr; Can_send_frame &rArr; arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[f4]"></a>CWJ_CAN_Send1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CWJ_CAN_Send1 &rArr; Can_send_frame &rArr; arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[f5]"></a>CWJ_CAN_Send_DOWN</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CWJ_CAN_Send_DOWN &rArr; Can_send_frame &rArr; arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
</UL>

<P><STRONG><a name="[f6]"></a>CWJ_CAN_Send_UP</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CWJ_CAN_Send_UP &rArr; Can_send_frame &rArr; arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
</UL>

<P><STRONG><a name="[f7]"></a>CWJ_CAN_Send2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CWJ_CAN_Send2 &rArr; Can_send_frame &rArr; arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
</UL>

<P><STRONG><a name="[f8]"></a>CWJ_CAN_Send_CMD</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CWJ_CAN_Send_CMD &rArr; Can_send_frame &rArr; arch_can_send &rArr; CANMessageSet &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
</UL>

<P><STRONG><a name="[e8]"></a>step_motor_fre_test</STRONG> (Thumb, 792 bytes, Stack size 40 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = step_motor_fre_test &rArr; GUI_GetInput &rArr; system_event_pop &rArr; qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Register
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Dregister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_pop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_save
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EDIT
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawInt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Botton
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send_CMD
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>CWJ_Test</STRONG> (Thumb, 3076 bytes, Stack size 168 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = CWJ_Test &rArr; GUI_GetInput &rArr; system_event_pop &rArr; qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Register
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Dregister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_pop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Progress_Bar
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EDIT
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawInt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Can_SetClr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Botton
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send1
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_receive_clc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_getc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_putc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>moto_set</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, canmonitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = moto_set &rArr; system_event_pop &rArr; qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Register
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Dregister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_pop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_save
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Botton
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send_CMD
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send2
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send_UP
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send_DOWN
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_CAN_Send1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>can_bps_save</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = can_bps_save &rArr; arch_eeprom_write &rArr; EEPROMProgram &rArr; EEPROMSetSectorMask
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[106]"></a>can_bps_load</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_bps_load &rArr; arch_eeprom_read &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_get
</UL>

<P><STRONG><a name="[79]"></a>can_bps_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_bps_get &rArr; can_bps_load &rArr; arch_eeprom_read &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_bps_load
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_can_config
</UL>

<P><STRONG><a name="[107]"></a>can_para_load</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_para_load &rArr; arch_eeprom_read &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fifo_para_load
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_para_save
</UL>

<P><STRONG><a name="[e5]"></a>can_fifo_para_load</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_fifo_para_load &rArr; can_para_load &rArr; arch_eeprom_read &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_para_load
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>can_para_save</STRONG> (Thumb, 50 bytes, Stack size 152 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_eeprom_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_para_load
</UL>

<P><STRONG><a name="[11d]"></a>can_fifo_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, canfifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_buf_init
</UL>

<P><STRONG><a name="[a3]"></a>can_data_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_data_read
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetMessage
</UL>

<P><STRONG><a name="[114]"></a>can_fifo_push</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push
</UL>

<P><STRONG><a name="[1eb]"></a>can_filter_id_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>can_filter_id_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>can_filter_id_save</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>can_filter_id_check</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, canfifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_filter
</UL>

<P><STRONG><a name="[1ee]"></a>can_filter_data_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>can_filter_data_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>can_filter_data_save</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>can_filter_data_check</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_filter
</UL>

<P><STRONG><a name="[1f1]"></a>can_filter_get_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>do_filter</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_filter &rArr; CF__can_fifo_push_msg &rArr; CF__can_fifo_drop &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_loc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_drop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_data_check
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_id_check
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_hook_100us
</UL>

<P><STRONG><a name="[1f2]"></a>CanRecv_FilterCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>ShowFifo_push</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ShowFifo_push &rArr; CF__can_fifo_push_msg &rArr; CF__can_fifo_drop &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_systicks
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_send_frame
</UL>

<P><STRONG><a name="[1f3]"></a>CanRecv_Clear</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>CanRecv_TopIdx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>CanRecv_Count</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanRecv_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_count
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_export_uart
</UL>

<P><STRONG><a name="[118]"></a>CanRecv_Data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_pop
</UL>

<P><STRONG><a name="[1f5]"></a>CanRecv_Total</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>CanRecv_FramePrint_dat</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_loc
</UL>

<P><STRONG><a name="[11a]"></a>CanRecv_FramePrint_loc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanRecv_FramePrint_loc &rArr; CF__can_fifo_loc &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_loc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_export_uart
</UL>

<P><STRONG><a name="[11c]"></a>CanRecv_pick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_loc
</UL>

<P><STRONG><a name="[ea]"></a>CanRecv_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graw_Show_Button
</UL>

<P><STRONG><a name="[1f6]"></a>canRecv_Toggle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canfifo.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>can_buf_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>can_export_uart</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = can_export_uart &rArr; CanRecv_FramePrint_loc &rArr; CF__can_fifo_loc &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_FramePrint_loc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_Count
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_key
</UL>

<P><STRONG><a name="[ff]"></a>GUI_GetInput</STRONG> (Thumb, 1116 bytes, Stack size 320 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GUI_GetInput &rArr; system_event_pop &rArr; qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Register
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Dregister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_pop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawInt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Can_SetClr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_rounded_rectangle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHex
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[f9]"></a>GUI_Botton</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_Botton &rArr; RA8875_rounded_rectangle &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_rounded_rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[122]"></a>GUI_set_CH</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, guilib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
</UL>

<P><STRONG><a name="[fa]"></a>GUI_EDIT</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_EDIT &rArr; RA8875_PartClrScr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[eb]"></a>GUI_DrawAscii</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_DrawAscii &rArr; RA8875_DispAscii &rArr; RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispAscii
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackColor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Progress_Bar
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawInt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graw_Show_Button
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHex
</UL>

<P><STRONG><a name="[fb]"></a>GUI_DrawInt</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_DrawInt &rArr; GUI_DrawAscii &rArr; RA8875_DispAscii &rArr; RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Progress_Bar
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[101]"></a>GUI_DrawRect</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_DrawRect &rArr; RA8875_DrawRect &rArr; RA8875_SetFrontColor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Progress_Bar
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[123]"></a>GUI_Local_color</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_Local_color &rArr; RA8875_PartClrScr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Progress_Bar
</UL>

<P><STRONG><a name="[102]"></a>GUI_Progress_Bar</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_Progress_Bar &rArr; GUI_DrawInt &rArr; GUI_DrawAscii &rArr; RA8875_DispAscii &rArr; RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawInt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PartClrScr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Local_color
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[f0]"></a>GUI_DrawLine</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, guilib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_bar
</UL>

<P><STRONG><a name="[105]"></a>GUI_Can_SetClr</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_Can_SetClr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Wait
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetOperateCode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetTarBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[ef]"></a>GUI_Clr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_Clr &rArr; RA8875_ClrScr &rArr; BTE_SetTarBlock &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ClrScr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_bar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[121]"></a>GUI_DrawHex</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_DrawHex &rArr; GUI_DrawAscii &rArr; RA8875_DispAscii &rArr; RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawAscii
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
</UL>

<P><STRONG><a name="[fd]"></a>touchctl_HotArea_Register</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, guilib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[100]"></a>touchctl_HotArea_Dregister</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, guilib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[126]"></a>touchctl_HotArea_Peek</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guilib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Machit
</UL>

<P><STRONG><a name="[125]"></a>system_event_count</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guilib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_pop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_push
</UL>

<P><STRONG><a name="[124]"></a>system_event_push</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_event_push
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_count
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Machit
</UL>

<P><STRONG><a name="[da]"></a>touchctl_HotArea_Machit</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = touchctl_HotArea_Machit &rArr; system_event_push
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_push
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchctl_HotArea_Peek
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_proc
</UL>

<P><STRONG><a name="[fe]"></a>system_event_pop</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, guilib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = system_event_pop &rArr; qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_detect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_poll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_count
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_motor_fre_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moto_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CWJ_Test
</UL>

<P><STRONG><a name="[127]"></a>qwl_shell_poll</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, qwl_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = qwl_shell_poll &rArr; qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_getc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_putc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_key
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_event_pop
</UL>

<P><STRONG><a name="[1f7]"></a>qwl_shell_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, qwl_shell.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_pop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFifo_push
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_data_read
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetInput
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_load
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_buf_init
</UL>

<P><STRONG><a name="[1fb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12b]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_login
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_parse_su
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_parse_user
</UL>

<P><STRONG><a name="[109]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_para_save
</UL>

<P><STRONG><a name="[129]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_pick
</UL>

<P><STRONG><a name="[132]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_login
</UL>

<P><STRONG><a name="[149]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[12c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_parse_user
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[136]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[b]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1fd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[141]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1fe]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ff]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[200]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[201]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[140]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[14a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[202]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[204]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[11f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_cmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_key
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_parse_su
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_pick
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_poll
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_export_uart
</UL>

<P><STRONG><a name="[205]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[206]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[14d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[207]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawInt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHex
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_FramePrint_loc
</UL>

<P><STRONG><a name="[208]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[209]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[20a]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[20b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[20c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[20d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPIOGetIntNumber</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntUnregister
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntRegister
</UL>

<P><STRONG><a name="[36]"></a>SysCtlPeripheralMapToNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralPowerOff
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralPowerOn
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
</UL>

<P><STRONG><a name="[8]"></a>IntDefaultHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>TimerIntNumberGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntUnregister
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>

<P><STRONG><a name="[4c]"></a>SSIIntNumberGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntUnregister
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
</UL>

<P><STRONG><a name="[4f]"></a>CANIntNumberGet</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntUnregister
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntRegister
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[4e]"></a>CANRegRead</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANErrCntrGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRetryGet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRetrySet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntDisable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingGet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDisable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
</UL>

<P><STRONG><a name="[51]"></a>CANRegWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageClear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRetrySet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntDisable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDisable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
</UL>

<P><STRONG><a name="[50]"></a>CANDataRegWrite</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>

<P><STRONG><a name="[52]"></a>CANDataRegRead</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
</UL>

<P><STRONG><a name="[66]"></a>EEPROMSetSectorMask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EEPROMSetSectorMask
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgramNonBlocking
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>

<P><STRONG><a name="[67]"></a>EEPROMClearSectorMask</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EEPROMClearSectorMask
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMIntClear
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>

<P><STRONG><a name="[69]"></a>EEPROMWaitForDone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>

<P><STRONG><a name="[73]"></a>UARTIntNumberGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntUnregister
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>

<P><STRONG><a name="[d4]"></a>RA8875_Delaly1us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, arch_ra8875.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[d3]"></a>RA8875_Delaly1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arch_ra8875.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[bd]"></a>RA8875_Delaly200us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arch_ra8875.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadXY
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
</UL>

<P><STRONG><a name="[a4]"></a>RA8875_WriteCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RA8875_WriteCmd &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispAscii
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_GetPixel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[a5]"></a>RA8875_WriteData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RA8875_WriteData &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispAscii
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[a7]"></a>RA8875_WriteData16</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawBMP
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_PutPixel
</UL>

<P><STRONG><a name="[a8]"></a>RA8875_ReadData16</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_GetPixel
</UL>

<P><STRONG><a name="[a9]"></a>RA8875_WriteReg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispAscii
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextZoom
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFont
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_rounded_rectangle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Drawcurve
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawEllipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawCircle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawRect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawTriangle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DrawLine
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetDispWin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispOff
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadXY
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Layer2Visable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Layer1Visable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackColor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetFrontColor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetOperateCode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_SetTarBlock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Cursor_Set_Position
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetCursor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetTextCursor
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetReadCursor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_SetBackLight
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Init
</UL>

<P><STRONG><a name="[aa]"></a>RA8875_ReadReg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RA8875_ReadReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadXY
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchReadX
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_TouchPress
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Layer2Visable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_Layer1Visable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_ReadID
</UL>

<P><STRONG><a name="[ab]"></a>RA8875_ReadStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RA8875_ReadStatus &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_RA8875_CS_setup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_SPI_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispAscii
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WaitBusy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Wait
</UL>

<P><STRONG><a name="[ae]"></a>RA8875_SetReadCursor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arch_ra8875.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_GetPixel
</UL>

<P><STRONG><a name="[af]"></a>RA8875_SetTextCursor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arch_ra8875.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RA8875_SetTextCursor &rArr; RA8875_WriteReg &rArr; arch_SPI_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RA8875_DispAscii
</UL>

<P><STRONG><a name="[d8]"></a>touch_data_insert</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, arch_touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touch_data_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_touch_read
</UL>

<P><STRONG><a name="[10b]"></a>CF__can_fifo_count</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, canfifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_is_full
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_is_empty
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_Count
</UL>

<P><STRONG><a name="[10a]"></a>CF__can_fifo_is_empty</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_count
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_pop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_loc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_drop
</UL>

<P><STRONG><a name="[10c]"></a>CF__can_fifo_is_full</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CF__can_fifo_is_full
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_count
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push_msg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push
</UL>

<P><STRONG><a name="[10d]"></a>CF__can_fifo_drop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CF__can_fifo_drop &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_filter
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push_msg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_push
</UL>

<P><STRONG><a name="[10e]"></a>CF__can_fifo_loc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CF__can_fifo_loc &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_filter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_pick
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_FramePrint_loc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_FramePrint_dat
</UL>

<P><STRONG><a name="[10f]"></a>CF__can_fifo_pop</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_is_empty
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRecv_Data
</UL>

<P><STRONG><a name="[111]"></a>CF__can_fifo_push</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, canfifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_drop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_is_full
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_get_systicks
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_fifo_push
</UL>

<P><STRONG><a name="[113]"></a>CF__can_fifo_push_msg</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, canfifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CF__can_fifo_push_msg &rArr; CF__can_fifo_drop &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_drop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF__can_fifo_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowFifo_push
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_filter
</UL>

<P><STRONG><a name="[128]"></a>qwl_shell_pick</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, qwl_shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[12a]"></a>qwl_shell_parse_user</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, qwl_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = qwl_shell_parse_user &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_cmd
</UL>

<P><STRONG><a name="[12d]"></a>qwl_shell_parse_su</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, qwl_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qwl_shell_parse_su &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlReset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_cmd
</UL>

<P><STRONG><a name="[12f]"></a>qwl_shell_key</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, qwl_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = qwl_shell_key &rArr; can_export_uart &rArr; CanRecv_FramePrint_loc &rArr; CF__can_fifo_loc &rArr; CF__can_fifo_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_export_uart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_poll
</UL>

<P><STRONG><a name="[130]"></a>qwl_shell_cmd</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, qwl_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = qwl_shell_cmd &rArr; qwl_shell_parse_user &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_putc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_parse_su
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_parse_user
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_poll
</UL>

<P><STRONG><a name="[131]"></a>qwl_shell_login</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, qwl_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = qwl_shell_login &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_uart_putc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qwl_shell_poll
</UL>

<P><STRONG><a name="[14e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[151]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[150]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
